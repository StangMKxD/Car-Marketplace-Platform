// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  name          String
  surname       String
  email         String         @unique
  password      String
  phone         String         @unique @db.VarChar(10)
  role          Role           @default(USER)
  emailVerified Boolean        @default(false)
  favouriteCars FavouriteCar[]
  bookings      Booking[]
  compareCars   CompareCar[]
  review        Review[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Car {
  id             Int            @id @default(autoincrement())
  brand          String
  model          String
  year           Int
  fuel           String
  price          Int
  transmission   Transmission
  images         Image[]
  detail         String?        @db.VarChar(1000)
  type           Type
  favouriteCars  FavouriteCar[]
  bookings       Booking[]
  compareCarsA   CompareCar[]   @relation("carA")
  compareCarsB   CompareCar[]   @relation("carB")
  stock          Int            @default(1)
  totalBookings  Int            @default(0)
  totalFavorites Int            @default(0)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model FavouriteCar {
  id        Int      @id @default(autoincrement())
  carId     Int
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  car       Car      @relation(fields: [carId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, carId])
}

model Booking {
  id        Int           @id @default(autoincrement())
  date      DateTime
  carId     Int
  userId    Int
  status    BookingStatus @default(PENDING)
  emailSent Boolean       @default(false)
  user      User          @relation(fields: [userId], references: [id])
  car       Car           @relation(fields: [carId], references: [id])
  createdAt DateTime      @default(now())
}

model CompareCar {
  id        Int      @id @default(autoincrement())
  carAId    Int?
  carBId    Int?
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  carA      Car?     @relation("carA", fields: [carAId], references: [id])
  carB      Car?     @relation("carB", fields: [carBId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId])
}

model SoldCar {
  id           Int          @id @default(autoincrement())
  carId        Int
  brand        String
  model        String
  year         Int
  fuel         String
  price        Int
  transmission Transmission
  detail       String?      @db.VarChar(1000)
  type         Type
  soldAt       DateTime     @default(now())
}

model Review {
  id     Int  @id @default(autoincrement())
  userId Int
  user   User @relation(fields: [userId], references: [id])
  detail String
  rating Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  USER
}

enum Type {
  SEDAN
  PICKUP4
  PICKUP
  MPV
}

enum Transmission {
  AUTO
  MANUAL
}

model Image {
  id    Int    @id @default(autoincrement())
  url   String
  carId Int
  car   Car    @relation(fields: [carId], references: [id], onDelete: Cascade)
}

enum BookingStatus {
  PENDING
  APPROVED
  REJECTED
}


