const prisma = require('../prisma/prisma');
const { Resend } = require("resend");

const resend = new Resend(process.env.RESEND_API_KEY);

// ‡∏î‡∏πlist user
exports.userList = async (req, res) => {
    try {
        const user = await prisma.user.findMany({
            orderBy: { createdAt: 'desc' }
        });
        res.json({ user })
    } catch (err) {
        console.error("userlist",err)
        res.status(500).json({ message: "‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"})
    }
}

// ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ 
exports.deleteUser = async (req, res) => {
  const userId = parseInt(req.params.id);

  try {
    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• favorite cars ‡∏Ç‡∏≠‡∏á user ‡∏ô‡∏µ‡πâ
    await prisma.favouriteCar.deleteMany({
      where: { userId },
    });

    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• booking ‡∏Ç‡∏≠‡∏á user ‡∏ô‡∏µ‡πâ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    await prisma.booking.deleteMany({
      where: { userId },
    });

    const deleted = await prisma.user.delete({
      where: { id: userId },
    });

    res.json({ deleted });
  } catch (err) {
    console.error("deleteuser",err);
    if (err.code === 'P2003') {
      return res.status(400).json({ message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà" });
    }
    res.status(500).json({ message: "‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß" });
  }
};

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏ñ
exports.createCar = async (req, res) => {
  const { brand, model, year, fuel, price, transmission, detail, type } = req.body;
  const files = req.files; 

  if (!brand) return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏£‡∏ñ (brand)" });
  if (!year || isNaN(parseInt(year))) return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏õ‡∏µ‡∏£‡∏ñ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
  if (!price || isNaN(parseInt(price))) return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ñ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });

  try {
    const newCar = await prisma.car.create({
      data: {
        brand,
        model,
        year: parseInt(year),
        fuel,
        price: parseInt(price),
        transmission,
        detail,
        type,
        images: {
          create: files.map((file) => ({
            url: `/uploads/${file.filename}`,
          })),
        },
      },
      include: {
        images: true,
      },
    });

    res.status(201).json({ message: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏ñ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", car: newCar });
  } catch (err) {
    console.error("cretecar", err);
    res.status(500).json({ message: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏ñ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  }
};

// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏ñ
exports.updateCar = async (req, res) => {
  const id = Number(req.params.id);
  const { brand, model, year, fuel, price, transmission, imageUrl, detail, type } =
    req.body;

  try {
    const car = await prisma.car.update({
      where: { id },
      data: { brand, model, year, fuel, price, transmission, imageUrl, detail, type },
    });
    res.json(car);
  } catch (err) {
    console.error("updatecar", err)
    res.status(404).json({ message: "‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏£‡∏ñ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç" });
  }
};

// ‡∏•‡∏ö‡∏£‡∏ñ
exports.deleteCar = async (req, res) => {
  const id = Number(req.params.id);
  try {
    const car = await prisma.car.findUnique({
      where: { id },
    });

    if (!car) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏£‡∏ñ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö" });
    }

    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà FK ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏£‡∏ñ‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    await prisma.image.deleteMany({
      where: { carId: id },
    });

    // ‡∏•‡∏ö favouriteCars
    await prisma.favouriteCar.deleteMany({
      where: { carId: id },
    });

    // ‡∏•‡∏ö bookings
    await prisma.booking.deleteMany({
      where: { carId: id },
    });

    // ‡∏•‡∏ö compareCars ‡∏ó‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô carA ‡∏´‡∏£‡∏∑‡∏≠ carB
    await prisma.compareCar.deleteMany({
      where: {
        OR: [{ carAId: id }, { carBId: id }],
      },
    });

    // ‡∏•‡∏ö‡∏£‡∏ñ
    await prisma.car.delete({
      where: { id },
    });

    res.json({ message: "‡∏•‡∏ö‡∏£‡∏ñ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", deleted: car });
  } catch (err) {
    console.error("deletecar",err);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏•‡∏ö‡∏£‡∏ñ", error: error.message });
  }
};

// ‡∏î‡∏∂‡∏á‡∏£‡∏ñ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö admin ‡∏Å‡∏±‡∏ö user)
exports.getAllCars = async (req, res) => {
  try {
    const cars = await prisma.car.findMany({
      include: {
        images: true
      }
    });
    res.json(cars);
  } catch (err) {
    console.error("getallcars", err)
    res.status(500).json({ message: "Fetch ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß" });
  }
};

// ‡∏î‡∏∂‡∏á‡∏£‡∏ñ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ‡πÑ‡∏≠‡∏î‡∏µ
exports.getCar = async (req, res) => {
  const carId = Number(req.params.id);

  try {
    const car = await prisma.car.findUnique({
      where: { id: carId },
      include: {
        images: true, 
      },
    });

    if (!car) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå‡∏Ñ‡∏±‡∏ô‡∏ô‡∏µ‡πâ" });
    }

    res.json(car);
  } catch (err) {
    console.error("getcar", err);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" });
  }
};

// ‡∏î‡∏π ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏î‡∏•‡∏≠‡∏á‡∏Ç‡∏±‡∏ö
exports.getAllBookings = async (req, res) => {
  try {
    const bookings = await prisma.booking.findMany({
      where: { status: "PENDING" },
      include: {
        user: true,
        car: true,
      },
    });
    res.json(bookings);
  } catch (err) {
    console.error("getallbookings",err);
    res.status(500).json({ message: "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  }
};

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ‡∏™‡πà‡∏á‡πÄ‡∏°‡∏•‡∏î‡πâ‡∏ß‡∏¢
exports.updateBookingStatus = async (req, res) => {
  const { id } = req.params;
  const { status } = req.body;

  try {
    const booking = await prisma.booking.findUnique({
      where: { id: parseInt(id) },
      include: {
        user: true,
        car: true,
      },
    });

    if (!booking) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ô‡∏µ‡πâ" });
    }

    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡∏≠‡∏µ‡∏Å
    if (booking.emailSent) {
      return res.json({ message: "‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß", booking });
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    const updated = await prisma.booking.update({
      where: { id: parseInt(id) },
      data: { status },
      include: {
        user: true,
        car: true,
      },
    });

    const { user, car } = updated;

    const statusText = status === "APPROVED" ? "‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß" : "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥";
    const emailContent = `
‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏∏‡∏ì ${user.name} ${user.surname},

‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏£‡∏ñ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏ñ‡∏£‡∏∏‡πà‡∏ô "${car.brand} ${car.model} ${car.year}" ${statusText}
‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠

‡∏Ç‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏±‡∏ö‡∏ñ‡∏∑‡∏≠,
‡∏Ñ‡∏ô‡∏´‡∏•‡πà‡∏≠‡∏Ñ‡∏ô‡πÄ‡∏ó‡πà
`;

console.log("üì§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏õ‡∏ó‡∏µ‡πà:", user.email);

    // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏î‡πâ‡∏ß‡∏¢ Resend
    await resend.emails.send({
      from: process.env.EMAIL_FROM,
      to: user.email,
      subject: "‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏£‡∏ñ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
      text: emailContent || "‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏à‡∏≤‡∏Å localhost",
    });

    console.log("‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß");

    await prisma.booking.update({
      where: { id: parseInt(id) },
      data: { emailSent: true },
    });

    res.json(updated);
  } catch (err) {
    console.error("updateBookingStatus error:", err);
    res.status(500).json({ message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  }
};


// ‡πÉ‡∏ä‡πâ AI ‡∏™‡πà‡∏á ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Approved
// exports.updateBookingStatus = async (req, res) => {
//   const { id } = req.params;
//   const { status } = req.body;

//   try {
//     const updated = await prisma.booking.update({
//       where: { id: parseInt(id) },
//       include: {
//         user: true,
//         car: true,
//       },
//       data: { status },
//     });

//     // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏£‡∏ñ
//     const { user, car } = updated;

//     // ‡πÉ‡∏ä‡πâ ChatGPT ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
//     const chatResponse = await openai.chat.completions.create({
//       model: "gpt-4o",
//       messages: [
//         {
//           role: "system",
//           content: "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏£‡∏ñ‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤",
//         },
//         {
//           role: "user",
//           content: `‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ${user.name} ‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏£‡∏ñ ${car.name} ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${status === "APPROVED" ? "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß" : "‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò"}`,
//         },
//       ],
//     });

//     const emailContent = chatResponse.choices[0].message.content;

//     // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏î‡πâ‡∏ß‡∏¢ Nodemailer
//     const transporter = nodemailer.createTransport({
//       service: "gmail",
//       auth: {
//         user: process.env.EMAIL_USER,
//         pass: process.env.EMAIL_PASS,
//       },
//     });

//     await transporter.sendMail({
//       from: process.env.EMAIL_USER,
//       to: user.email,
//       subject: "‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏£‡∏ñ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
//       text: emailContent,
//     });

//     res.json(updated);
//   } catch (err) {
//     console.error("updatebookingstatus", err);
//     res.status(500).json({ message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
//   }
// };